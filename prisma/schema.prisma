// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String      @id @default(uuid())
  firstName      String?
  lastName       String?
  email          String?
  image          String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  role           Role        @default(USER)
  token          String?
  blocked        Boolean     @default(false)
  provider       Provider?
  providerUserId String?
  petitions      Petition[]
  testimonies    Testimony[]
  messages       Message[]
  volunteer      Volunteer?
  member         Member?
  vote           Vote?
  trainee        Trainee[]
  orders         Order[]
}

enum Role {
  USER
  STAFF
}

enum Provider {
  FACEBOOK
  GOOGLE
}

model Petition {
  id               String   @id @default(uuid())
  firstname        String
  lastname         String
  address          String
  cin              String   @unique
  electoral_number String   @unique
  email            String   @unique
  valid            Boolean  @default(false)
  userId           String?
  user             User?    @relation(fields: [userId], references: [id])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Testimony {
  id        Int      @id @default(autoincrement())
  name      String?
  age       String?
  text      String
  city      String?
  valid     Boolean  @default(false)
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  reason    String
  message   String
  phone     String
  treated   Boolean  @default(false)
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Volunteer {
  id             Int      @id @default(autoincrement())
  name           String
  email          String   @unique
  phone          String
  birth          String
  address        String
  help           String
  expertise      String
  qualifications String
  social         String?
  userId         String?  @unique
  user           User?    @relation(fields: [userId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Trainee {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  phone        String
  birth        String
  address      String
  degree       String
  speciality   String
  availability String
  letter       String
  social       String?
  user         User?    @relation(fields: [userId], references: [id])
  userId       String?  @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Member {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  phone     String
  birth     String
  address   String
  social    String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Vote {
  id             Int      @id @default(autoincrement())
  name           String?
  age            String?
  gender         String?
  email          String?
  love           String?
  right          String?
  choice         String?
  recommendation String?
  user           User?    @relation(fields: [userId], references: [id])
  userId         String?  @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Reward {
  id       Int     @id @default(autoincrement())
  code     String  @unique
  price    Int
  archived Boolean @default(false)
  orders   Order[]
}

model Order {
  id         Int       @id @default(autoincrement())
  reward     Reward    @relation(fields: [rewardId], references: [id])
  rewardId   Int
  user       User      @relation(fields: [userId], references: [id])
  userId     String    @unique
  email      String
  phone      String
  name       String
  address    String
  price      Int
  accepted   Boolean   @default(false)
  acceptedAt DateTime?
  sent       Boolean   @default(false)
  sentAt     DateTime?
  received   Boolean   @default(false)
  receivedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  canceled   Boolean   @default(false)
}
